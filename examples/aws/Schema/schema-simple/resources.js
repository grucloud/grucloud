// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "EventBus",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Name: "my-event-bus",
    }),
  },
  {
    type: "Discoverer",
    group: "Schemas",
    properties: ({}) => ({
      CrossAccount: true,
    }),
    dependencies: ({}) => ({
      eventBus: "my-event-bus",
    }),
  },
  {
    type: "Registry",
    group: "Schemas",
    properties: ({}) => ({
      RegistryName: "my-registry",
    }),
  },
  {
    type: "RegistryPolicy",
    group: "Schemas",
    properties: ({ config }) => ({
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "AllowReadWrite",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "schemas:*",
            Resource: [
              `arn:aws:schemas:${
                config.region
              }:${config.accountId()}:registry/my-registry`,
              `arn:aws:schemas:${
                config.region
              }:${config.accountId()}:schema/my-registry*`,
            ],
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      registry: "my-registry",
    }),
  },
  {
    type: "Schema",
    group: "Schemas",
    properties: ({}) => ({
      Content: {
        openapi: "3.0.0",
        info: {
          version: "1.0.0",
          title: "Event",
        },
        paths: {},
        components: {
          schemas: {
            Event: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                },
              },
            },
          },
        },
      },
      SchemaName: "my-schema",
      Type: "OpenApi3",
    }),
    dependencies: ({}) => ({
      registry: "my-registry",
    }),
  },
];
